#+TITLE: 编程范式 Programming Paradigms

* different ways of modeling a problem

#+BEGIN_EXAMPLE
################################
ilovecpp (cpp) 于  (Mon Aug 29 09:55:29 2011)  提到:

【 在 Madsen (format t "A walker") 的大作中提到: 】
: 比如，试着用python等楼主认为的主流语言写这么一个函数：
: 1、接收两个参数，第一个参数是一个表达式，第二个则是期待的eval这个表达
: 式得到的值
: 2、输出要求：在标准得到这个表达式的raw form以及实际eval以后的值，并
: 输出期待的
: ...................

用程序构造程序，目前流行的有三种风格：
1. 直接在程序"文本"（S-exp）上作变换。只在Lisp上流行。
2. 构造一组互相关联的对象作为程序。OOPL。
3. 构造函数的组合作为程序。FPL。

我的感觉是这三种风格在表达能力上没有明显的高下。举一个特别适合风格1的
例子并不能说明风格2/3较弱。对于同一个复杂的现实世界问题，不同风格的程
序长度差不多。
################################
#+END_EXAMPLE

lisp的macro能对文本代码作变换是因为文本代码的被很直接、方便和优雅地转变
成了lisp最擅长处理的list格式。且侧重的是代码变换方面。

lisp程序的代码倒是也可以被认为是一种对问题（problems）建模并描述的方法。
这种建模和描述方法可以被很容易地变换，因为lisp的macro。

另一方面，lisp代码被加载之后变成了list，这是一种对代码本身建模和描述的
方法。在此基础上，各种查询和变换都变得很方便。

OOPL和FPL也是对问题的描述和建模方法。另外一个层面，如果各自的compile
time和runtime能够提供相应的对Object本身和Function本身建模并查询各种信息
（reflection）的utilities，那么对Object和Function的各种查询和变换也将变
得很容易？

所以建模和描述可以大概分为两个层面：

 - 对待解决问题领域（target problem domain）的建模和描述，去解决问题
 - 对用来解决问题的手段、方法或者媒介（代码、对象或者函数）本身进行建模
   和描述，并提供查询（reflection）的utilities，使得解决问题更加轻松和
   方便。这个层面属于meta层面？
   - 这个层面的建模又可以分为至少两种：相关的reflection信息可否在
     compile time得到；以及可否在runtime得到。在compile time可以得到的
     话，compile的时候可以做更多的处理和变换。

建模和描述，大概就是“编程”。

